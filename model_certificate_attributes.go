/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CertificateAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateAttributes{}

// CertificateAttributes struct for CertificateAttributes
type CertificateAttributes struct {
	Name string `json:"name"`
	CertificateType CertificateType `json:"certificateType"`
	DisplayName string `json:"displayName"`
	SerialNumber string `json:"serialNumber"`
	Platform *BundleIdPlatform `json:"platform,omitempty"`
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`
	CertificateContent *string `json:"certificateContent,omitempty"`
	Activated *bool `json:"activated,omitempty"`
}

type _CertificateAttributes CertificateAttributes

// NewCertificateAttributes instantiates a new CertificateAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateAttributes(name string, certificateType CertificateType, displayName string, serialNumber string) *CertificateAttributes {
	this := CertificateAttributes{}
	this.Name = name
	this.CertificateType = certificateType
	this.DisplayName = displayName
	this.SerialNumber = serialNumber
	return &this
}

// NewCertificateAttributesWithDefaults instantiates a new CertificateAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateAttributesWithDefaults() *CertificateAttributes {
	this := CertificateAttributes{}
	return &this
}

// GetName returns the Name field value
func (o *CertificateAttributes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CertificateAttributes) SetName(v string) {
	o.Name = v
}

// GetCertificateType returns the CertificateType field value
func (o *CertificateAttributes) GetCertificateType() CertificateType {
	if o == nil {
		var ret CertificateType
		return ret
	}

	return o.CertificateType
}

// GetCertificateTypeOk returns a tuple with the CertificateType field value
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetCertificateTypeOk() (*CertificateType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateType, true
}

// SetCertificateType sets field value
func (o *CertificateAttributes) SetCertificateType(v CertificateType) {
	o.CertificateType = v
}

// GetDisplayName returns the DisplayName field value
func (o *CertificateAttributes) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CertificateAttributes) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetSerialNumber returns the SerialNumber field value
func (o *CertificateAttributes) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *CertificateAttributes) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *CertificateAttributes) GetPlatform() BundleIdPlatform {
	if o == nil || IsNil(o.Platform) {
		var ret BundleIdPlatform
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetPlatformOk() (*BundleIdPlatform, bool) {
	if o == nil || IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *CertificateAttributes) HasPlatform() bool {
	if o != nil && !IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given BundleIdPlatform and assigns it to the Platform field.
func (o *CertificateAttributes) SetPlatform(v BundleIdPlatform) {
	o.Platform = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *CertificateAttributes) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *CertificateAttributes) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *CertificateAttributes) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetCertificateContent returns the CertificateContent field value if set, zero value otherwise.
func (o *CertificateAttributes) GetCertificateContent() string {
	if o == nil || IsNil(o.CertificateContent) {
		var ret string
		return ret
	}
	return *o.CertificateContent
}

// GetCertificateContentOk returns a tuple with the CertificateContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetCertificateContentOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateContent) {
		return nil, false
	}
	return o.CertificateContent, true
}

// HasCertificateContent returns a boolean if a field has been set.
func (o *CertificateAttributes) HasCertificateContent() bool {
	if o != nil && !IsNil(o.CertificateContent) {
		return true
	}

	return false
}

// SetCertificateContent gets a reference to the given string and assigns it to the CertificateContent field.
func (o *CertificateAttributes) SetCertificateContent(v string) {
	o.CertificateContent = &v
}

// GetActivated returns the Activated field value if set, zero value otherwise.
func (o *CertificateAttributes) GetActivated() bool {
	if o == nil || IsNil(o.Activated) {
		var ret bool
		return ret
	}
	return *o.Activated
}

// GetActivatedOk returns a tuple with the Activated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetActivatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Activated) {
		return nil, false
	}
	return o.Activated, true
}

// HasActivated returns a boolean if a field has been set.
func (o *CertificateAttributes) HasActivated() bool {
	if o != nil && !IsNil(o.Activated) {
		return true
	}

	return false
}

// SetActivated gets a reference to the given bool and assigns it to the Activated field.
func (o *CertificateAttributes) SetActivated(v bool) {
	o.Activated = &v
}

func (o CertificateAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["certificateType"] = o.CertificateType
	toSerialize["displayName"] = o.DisplayName
	toSerialize["serialNumber"] = o.SerialNumber
	if !IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.CertificateContent) {
		toSerialize["certificateContent"] = o.CertificateContent
	}
	if !IsNil(o.Activated) {
		toSerialize["activated"] = o.Activated
	}
	return toSerialize, nil
}

func (o *CertificateAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"certificateType",
		"displayName",
		"serialNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateAttributes := _CertificateAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	err = decoder.Decode(&varCertificateAttributes)

	if err != nil {
		return err
	}

	*o = CertificateAttributes(varCertificateAttributes)

	return err
}

type NullableCertificateAttributes struct {
	value *CertificateAttributes
	isSet bool
}

func (v NullableCertificateAttributes) Get() *CertificateAttributes {
	return v.value
}

func (v *NullableCertificateAttributes) Set(val *CertificateAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateAttributes(val *CertificateAttributes) *NullableCertificateAttributes {
	return &NullableCertificateAttributes{value: val, isSet: true}
}

func (v NullableCertificateAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


